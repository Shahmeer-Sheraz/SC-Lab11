2023-12-09 11:45:48:961 grammar LogManager.java:25 before: (COMBINED_GRAMMAR Expr (RULES (RULE prog (BLOCK (ALT (+ (BLOCK (ALT stat)))))) (RULE stat (BLOCK (ALT expr NEWLINE) (ALT ID '=' expr NEWLINE) (ALT NEWLINE))) (RULE expr (BLOCK (ALT expr (BLOCK (ALT '*') (ALT '/')) expr) (ALT expr (BLOCK (ALT '+') (ALT '-')) expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NEWLINE (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip)))))
2023-12-09 11:45:49:018 grammar LogManager.java:25 after: (COMBINED_GRAMMAR Expr (RULES (RULE prog (BLOCK (ALT (+ (BLOCK (ALT stat)))))) (RULE stat (BLOCK (ALT expr NEWLINE) (ALT ID '=' expr NEWLINE) (ALT NEWLINE))) (RULE expr (BLOCK (ALT expr (SET '*' '/') expr) (ALT expr (SET '+' '-') expr) (ALT INT) (ALT ID) (ALT '(' expr ')'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NEWLINE (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip)))))
2023-12-09 11:45:49:155 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR Expr (RULES (RULE prog (BLOCK (ALT (+ (BLOCK (ALT stat)))))) (RULE stat (BLOCK (ALT expr NEWLINE) (ALT ID '=' expr NEWLINE) (ALT NEWLINE))) (RULE expr (BLOCK (ALT expr (SET '*' '/') expr) (ALT expr (SET '+' '-') expr) (ALT INT) (ALT ID) (ALT '(' expr ')')))))
2023-12-09 11:45:49:155 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR ExprLexer (RULES (RULE T__0 (BLOCK (ALT '='))) (RULE T__1 (BLOCK (ALT '*'))) (RULE T__2 (BLOCK (ALT '/'))) (RULE T__3 (BLOCK (ALT '+'))) (RULE T__4 (BLOCK (ALT '-'))) (RULE T__5 (BLOCK (ALT '('))) (RULE T__6 (BLOCK (ALT ')'))) (RULE ID (BLOCK (ALT (+ (BLOCK (ALT [a-zA-Z])))))) (RULE INT (BLOCK (ALT (+ (BLOCK (ALT [0-9])))))) (RULE NEWLINE (BLOCK (ALT (? (BLOCK (ALT '\r'))) '\n'))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t])))) skip)))))
2023-12-09 11:45:49:750 left-recursion LogManager.java:25 expr
    :   ( {} INT<tokenIndex=65> 
        | ID<tokenIndex=69> 
        | '('<tokenIndex=73> expr<tokenIndex=75> ')'<tokenIndex=77> 
        )
        (
          {precpred(_ctx, 5)}?<p=5> ('*'<tokenIndex=44>|'/'<tokenIndex=46>) expr<tokenIndex=49,p=6>
                  | {precpred(_ctx, 4)}?<p=4> ('+'<tokenIndex=56>|'-'<tokenIndex=58>) expr<tokenIndex=61,p=5>
        )*
    ;
2023-12-09 11:45:49:765 grammar LogManager.java:25 added: (RULE expr (BLOCK (ALT (BLOCK (ALT {} (INT (ELEMENT_OPTIONS (= tokenIndex 65)))) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 69)))) (ALT ('(' (ELEMENT_OPTIONS (= tokenIndex 73))) (expr (ELEMENT_OPTIONS (= tokenIndex 75))) (')' (ELEMENT_OPTIONS (= tokenIndex 77))))) (* (BLOCK (ALT ({precpred(_ctx, 5)}? (ELEMENT_OPTIONS (= p 5))) (SET ('*' (ELEMENT_OPTIONS (= tokenIndex 44))) ('/' (ELEMENT_OPTIONS (= tokenIndex 46)))) (expr (ELEMENT_OPTIONS (= tokenIndex 49) (= p 6)))) (ALT ({precpred(_ctx, 4)}? (ELEMENT_OPTIONS (= p 4))) (SET ('+' (ELEMENT_OPTIONS (= tokenIndex 56))) ('-' (ELEMENT_OPTIONS (= tokenIndex 58)))) (expr (ELEMENT_OPTIONS (= tokenIndex 61) (= p 5)))))))))
2023-12-09 11:45:49:767 semantics LogManager.java:25 tokens={EOF=-1, T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, ID=8, INT=9, NEWLINE=10, WS=11}
2023-12-09 11:45:49:768 semantics LogManager.java:25 strings={'='=1, '*'=2, '/'=3, '+'=4, '-'=5, '('=6, ')'=7}
2023-12-09 11:45:49:790 LL1 LogManager.java:25 
DECISION 0 in rule prog
2023-12-09 11:45:49:790 LL1 LogManager.java:25 look=[{6, 8..10}, <EOF>]
2023-12-09 11:45:49:792 LL1 LogManager.java:25 LL(1)? true
2023-12-09 11:45:49:792 LL1 LogManager.java:25 
DECISION 1 in rule stat
2023-12-09 11:45:49:792 LL1 LogManager.java:25 look=[{6, 8..9}, 8, 10]
2023-12-09 11:45:49:792 LL1 LogManager.java:25 LL(1)? false
2023-12-09 11:45:49:792 LL1 LogManager.java:25 
DECISION 2 in rule expr
2023-12-09 11:45:49:792 LL1 LogManager.java:25 look=[9, 8, 6]
2023-12-09 11:45:49:793 LL1 LogManager.java:25 LL(1)? true
2023-12-09 11:45:49:793 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-12-09 11:45:49:793 LL1 LogManager.java:25 look=[null, null]
2023-12-09 11:45:49:793 LL1 LogManager.java:25 LL(1)? false
2023-12-09 11:45:49:793 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-12-09 11:45:49:793 LL1 LogManager.java:25 look=[null, null]
2023-12-09 11:45:49:793 LL1 LogManager.java:25 LL(1)? false
2023-12-09 11:45:49:849 action-translator LogManager.java:25 translate 
2023-12-09 11:45:49:854 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2023-12-09 11:45:49:855 action-translator LogManager.java:25 translate precpred(_ctx, 4)
2023-12-09 11:45:49:858 action-translator LogManager.java:25 translate precpred(_ctx, 5)
2023-12-09 11:45:49:859 action-translator LogManager.java:25 translate precpred(_ctx, 4)
